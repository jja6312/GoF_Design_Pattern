** 팩토리 메서드 패턴 **
--------------------------------------------------------------------------------------------------
의문:
- 왜 추상클래스로 팩토리 메서드 패턴을 구현할까? 인터페이스로 하면 안될까?
    => 인터페이스는 필드를 가질 수 없는데(default 메서드를 가진다고 해도 복잡해짐.), 팩토리 메서드 패턴에서는 공통 로직을 포함하는 경우가 잦기 때문에 추상클래스로 구현하는 것이 일반적임.
- 스프링에서는 싱글톤으로 객체를 생성하고 DI방식으로 주입하는데, 내가 웹개발을 하면서 팩토리 메서드 패턴을 사용할 일이 있을까?
    => 거의 사용할 일이 없으나, 요청에 따라 다른 객체를 생성해야하는 경우 사용될 수 있다.
--------------------------------------------------------------------------------------------------

1. 정의
객체 생성을 서브클래스로 위임하여, 특정 메서드를 통해 생성하는 객체 생성 캡슐화 디자인패턴.

2. 특징
- 객체 생성 로직을 분리하여 유지보수성을 높임
- 다형성을 활용하여 확장성 증가
- 코드 재사용성 증가: 객체 생성 로직이 한 곳에서 관리되므로 여러 곳에서 재사용할 수 있음.

3. 종류
- 기본 팩토리 메서드
- 매개변수가 있는 팩토리 메서드
- 익명 팩토리 메서드
- 심플 팩토리

4. 결론
전략 패턴과 결합하여, 다양한 결제 수단을 처리하는 API를 개발할 떄 활용할 여지가 있다.